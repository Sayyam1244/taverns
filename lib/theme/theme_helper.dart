import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.indigo50,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray80001,
          fontSize: 16.fSize,
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.errorContainer,
          fontSize: 14.fSize,
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray60001,
          fontSize: 12.fSize,
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: colorScheme.secondaryContainer.withOpacity(1),
          fontSize: 40.fSize,
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: appTheme.blueGray800,
          fontSize: 30.fSize,
          fontFamily: 'Circular Std',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.secondaryContainer.withOpacity(1),
          fontSize: 24.fSize,
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray80001,
          fontSize: 12.fSize,
          fontFamily: 'Circular Std',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.blueGray400,
          fontSize: 10.fSize,
          fontFamily: 'Circular Std',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray60001,
          fontSize: 14.fSize,
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors

    primary: Color(0XFF995E34),
    primaryContainer: Color(0XFF121826),
    secondaryContainer: Color(0X0C000000),

    // Error colors
    errorContainer: Color(0XFF394150),
    onErrorContainer: Color(0XEFFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFF030E24),
    onPrimaryContainer: Color(0XFF1EBE71),
    onSecondaryContainer: Color(0XFF2F2E41),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  Color get white => Color(0xffFFFFFF);
  // Amber
  Color get amber500 => Color(0XFFFFC107);

  // Blacka
  Color get black9000a => Color(0X0A090B1B);

  // Blue
  Color get blue700 => Color(0XFF0666EB);

  // BlueGray
  Color get blueGray100 => Color(0XFFCFD3DB);
  Color get blueGray10066 => Color(0X66D2D2E4);
  Color get blueGray400 => Color(0XFF7E7B96);
  Color get blueGray40001 => Color(0XFF8C8CA0);
  Color get blueGray500 => Color(0XFF6F7C90);
  Color get blueGray700 => Color(0XFF475569);
  Color get blueGray70001 => Color(0XFF4E5B52);
  Color get blueGray800 => Color(0XFF394456);
  Color get blueGray80001 => Color(0XFF3F3D56);
  Color get blueGray900 => Color(0XFF333333);
  Color get blueGray90001 => Color(0XFF28283D);

  // DeepOrange
  Color get deepOrange200 => Color(0XFFFDADAC);

  // Gray
  Color get gray400 => Color(0XFFBFBFBF);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray5001 => Color(0XFFFCFCFC);
  Color get gray600 => Color(0XFF828282);
  Color get gray60001 => Color(0XFF6B6B6B);
  Color get gray800 => Color(0XFF4F4F4F);
  Color get gray80001 => Color(0XFF404040);
  Color get gray90060 => Color(0X60181439);

  // Grayf
  Color get gray9000f => Color(0X0F020A2E);

  // Green
  Color get green300 => Color(0XFF62D481);

  // Indigo
  Color get indigo50 => Color(0XFFEBEFF8);

  // LightBlue
  Color get lightBlue50 => Color(0XFFD8F2FF);

  // Red
  Color get red400 => Color(0XFFEB5757);

  // Yellow
  Color get yellow50 => Color(0XFFFFF7EA);
  Color get yellow5001 => Color(0XFFFFF7E9);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
